a7d8473
/followers/
!test/
#!/usr/bin/env python3
from grammars import Grammar, ε, τ

grm = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)
assert grm.followers() == {"S": {"PLUS", τ}, "F": {"CLOSE", "PLUS", τ}}
~ ~ ~
\
/grammar hashing/
!test/
#!/usr/bin/env python3
from grammars import Grammar

grm1 = Grammar([("S", ("F", "F"))])
grm2 = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)
grm3 = eval(repr(grm2))
assert hash(grm1) != hash(grm2)
assert hash(grm2) == hash(grm3)
~ ~ ~
\
/grammar serialization/
!test/
#!/usr/bin/env python3
from grammars import Grammar

grm1 = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)
grm2 = eval(repr(grm1))
assert repr(grm1) == repr(grm2)
assert grm1 == grm2
~ ~ ~
\
/ll parser table creation/
!test/
#!/usr/bin/env python3
from llparser import construct_table
from grammars import Grammar

grm = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)

assert construct_table(grm) == {("S", "a"): 0, ("S", "OPEN"): 1, ("F", "a"): 2}
~ ~ ~
\
/ll1 parser/
!test/
#!/usr/bin/env python3
from grammars import Grammar
from llparser import Parser

grm = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)

parse = Parser(grm).parse
print('(a+a) ->', parse(['OPEN', 'a', 'PLUS', 'a', 'CLOSE']))
~ ~ ~
\
/ll1 parser parses sum/
!test/
#!/usr/bin/env python3
from grammars import Grammar
from llparser import Parser

grm = Grammar(
    [
        ("S", ("T",)),
        ("S", (ord("("), "S", ord("+"), "S", ord(")"))),
        ("T", (ord("0"), "T")),
        ("T", (ord("1"), "T")),
        ("T", (ord("2"), "T")),
        ("T", (ord("3"), "T")),
        ("T", (ord("4"), "T")),
        ("T", (ord("5"), "T")),
        ("T", (ord("6"), "T")),
        ("T", (ord("7"), "T")),
        ("T", (ord("8"), "T")),
        ("T", (ord("9"), "T")),
        ("T", ()),
    ]
)


def parse_sum(*args):
    if len(args) == 2:
        return int(args[1])
    return int(args[2]) + int(args[4])


def parse_number(*args):
    if len(args) > 1:
        return chr(args[1]) + args[2]
    else:
        return ""


actions = {"T": parse_number, "S": parse_sum}
parse = Parser(grm, actions=actions).parse
src = "(123+(321+555))"
assert parse(b"(123+(321+555))") == 999
~ ~ ~
\
/ll1 parser with actions/
!test/
#!/usr/bin/env python3
from collections import defaultdict
from grammars import Grammar
from llparser import Parser

grm = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)

parse = Parser(grm, actions=defaultdict(lambda: lambda *a: len(a))).parse
assert parse(['OPEN', 'a', 'PLUS', 'a', 'CLOSE']) == 6
~ ~ ~
\
/prefixes/
!test/
#!/usr/bin/env python3
from grammars import Grammar, ε, τ

grm = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)
assert grm.prefixes() == {
    "S": {"a", "OPEN"},
    "F": {"a"},
    (): {ε},
    ("F",): {"a"},
    ("OPEN", "S", "PLUS", "F", "CLOSE"): {"OPEN"},
    ("S", "PLUS", "F", "CLOSE"): {"OPEN", "a"},
    ("PLUS", "F", "CLOSE"): {"PLUS"},
    ("F", "CLOSE"): {"a"},
    ("CLOSE",): {"CLOSE"},
    ("a",): {"a"},
}
~ ~ ~
\
