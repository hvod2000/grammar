a7d8473
/followers/
!test/
#!/usr/bin/env python3
from grammar import Grammar

grm = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)
assert grm.followers() == {'S': {'PLUS', None}, 'F': {'CLOSE', 'PLUS', None}}
~ ~ ~
\
/grammar hashing/
!test/
#!/usr/bin/env python3
from grammar import Grammar

grm1 = Grammar([("S", ("F", "F"))])
grm2 = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)
grm3 = eval(repr(grm2))
assert hash(grm1) != hash(grm2)
assert hash(grm2) == hash(grm3)
~ ~ ~
\
/grammar serialization/
!test/
#!/usr/bin/env python3
from grammar import Grammar

grm1 = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)
grm2 = eval(repr(grm1))
assert repr(grm1) == repr(grm2)
assert grm1 == grm2
~ ~ ~
\
/ll parser table creation/
!test/
#!/usr/bin/env python3
from llparser import construct_table
from grammar import Grammar

grm = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)

assert construct_table(grm) == {("S", "a"): 0, ("S", "OPEN"): 1, ("F", "a"): 2}
~ ~ ~
\
/prefixes/
!test/
#!/usr/bin/env python3
from grammar import Grammar

grm = Grammar(
    [
        ("S", ("F",)),
        ("S", ("OPEN", "S", "PLUS", "F", "CLOSE")),
        ("F", ("a",)),
    ]
)
assert grm.prefixes() == {'S': {'a', 'OPEN'}, 'F': {'a'}, ('F',): {'a'}, ('OPEN', 'S', 'PLUS', 'F', 'CLOSE'): {'OPEN'}, ('a',): {'a'}}
~ ~ ~
\
